networks:
  kafka_network:

services:
  peter-kafka01:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    container_name: peter-kafka01
    ports:
      - "9092:9092" # 내부 네트워크 통신을 위한 PLAINTEXT 리스너
      - "10000:10000" # 외부 접근을 위한 EXTERNAL 리스너
    environment:
      # KRaft 설정
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw # 고유 클러스터 ID, 모든 브로커에 동일하게 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@peter-kafka01:9093,1@peter-kafka02:9093,2@peter-kafka03:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 리스너 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://peter-kafka01:9092,EXTERNAL://localhost:10000
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 클러스터 설정
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      # JMX
      - KAFKA_OPTS=-Dcom.sun.management.jmxremote.port=9999
          -Dcom.sun.management.jmxremote.rmi.port=9999
          -Dcom.sun.management.jmxremote.local.only=false
          -Djava.rmi.server.hostname=peter-kafka01
    networks:
      - kafka_network

  peter-kafka02:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    container_name: peter-kafka02
    ports:
      - "9093:9092" # 내부 네트워크 통신을 위한 PLAINTEXT 리스너
      - "10001:10000" # 외부 접근을 위한 EXTERNAL 리스너
    environment:
      # KRaft 설정
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw # 고유 클러스터 ID, 모든 브로커에 동일하게 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@peter-kafka01:9093,1@peter-kafka02:9093,2@peter-kafka03:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 리스너 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://peter-kafka02:9092,EXTERNAL://localhost:10001
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 클러스터 설정
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      # JMX
      - KAFKA_OPTS=-Dcom.sun.management.jmxremote.port=9999
        -Dcom.sun.management.jmxremote.rmi.port=9999
        -Dcom.sun.management.jmxremote.local.only=false
        -Djava.rmi.server.hostname=peter-kafka02
    networks:
      - kafka_network

  peter-kafka03:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    container_name: peter-kafka03
    ports:
      - "9094:9092" # 내부 네트워크 통신을 위한 PLAINTEXT 리스너
      - "10002:10000" # 외부 접근을 위한 EXTERNAL 리스너
    environment:
      # KRaft 설정
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw # 고유 클러스터 ID, 모든 브로커에 동일하게 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@peter-kafka01:9093,1@peter-kafka02:9093,2@peter-kafka03:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 리스너 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://peter-kafka03:9092,EXTERNAL://localhost:10002
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 클러스터 설정
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      # JMX
      - KAFKA_OPTS=-Dcom.sun.management.jmxremote.port=9999
        -Dcom.sun.management.jmxremote.rmi.port=9999
        -Dcom.sun.management.jmxremote.local.only=false
        -Djava.rmi.server.hostname=peter-kafka03
    networks:
      - kafka_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    container_name: kafka-ui
    ports:
      - "8085:8080" # 호스트의 8085 포트를 컨테이너의 8080 포트에 바인딩
    environment:
      - KAFKA_CLUSTERS_0_NAME=peter-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=peter-kafka01:9092,peter-kafka02:9092,peter-kafka03:9092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
    depends_on:
      - peter-kafka01
      - peter-kafka02
      - peter-kafka03
    networks:
      - kafka_network

  kafka-exporter:
    image: danielqsj/kafka-exporter
    restart: unless-stopped
    container_name: kafka-exporter
    command:
      - --kafka.server=peter-kafka01:9092
      - --kafka.server=peter-kafka02:9092
      - --kafka.server=peter-kafka03:9092
      - --kafka.version=3.7.0
    depends_on:
      - peter-kafka01
      - peter-kafka02
      - peter-kafka03
    networks:
      - kafka_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
    depends_on:
      - kafka-exporter
      - peter-kafka01-jmx-exporter
      - peter-kafka02-jmx-exporter
      - peter-kafka03-jmx-exporter
    networks:
      - kafka_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - kafka_network

  peter-kafka01-jmx-exporter:
    image: bitnami/jmx-exporter:latest
    container_name: peter-kafka01-jmx-exporter
    volumes:
      - ./peter-kafka02-jmx-config.yaml:/opt/bitnami/jmx-exporter/examples/standalone_sample_config.yml:ro
    depends_on:
      - peter-kafka02
    networks:
      - kafka_network

  peter-kafka02-jmx-exporter:
    image: bitnami/jmx-exporter:latest
    container_name: peter-kafka02-jmx-exporter
    volumes:
      - ./peter-kafka02-jmx-config.yaml:/opt/bitnami/jmx-exporter/examples/standalone_sample_config.yml:ro
    depends_on:
      - peter-kafka02
    networks:
      - kafka_network

  peter-kafka03-jmx-exporter:
    image: bitnami/jmx-exporter:latest
    container_name: peter-kafka03-jmx-exporter
    ports:
      - "5556:5556"
    volumes:
#      - ./peter-kafka03-jmx-config.yaml:/opt/bitnami/jmx-exporter/config.yml:ro
      - ./peter-kafka03-jmx-config.yaml:/opt/bitnami/jmx-exporter/examples/standalone_sample_config.yml:ro
    depends_on:
      - peter-kafka03
    networks:
      - kafka_network
